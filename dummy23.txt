import os
import subprocess
import pickle
import hashlib
import jwt
import sqlite3
import requests

def insecure_login(username, password):
    # Hardcoded credentials (CWE-798)
    if username == "admin" and password == "123456":
        print("Login successful!")
    else:
        print("Login failed!")

# SQL Injection vulnerability (CWE-89)
def vulnerable_query(user_input):
    conn = sqlite3.connect("test.db")
    cursor = conn.cursor()
    query = f"SELECT * FROM users WHERE name = '{user_input}'"
    cursor.execute(query)  # Dangerous practice
    result = cursor.fetchall()
    print(result)
    conn.close()

# Command Injection vulnerability (CWE-78)
def run_command(cmd):
    os.system(cmd)  # Unsanitized user input used in system command

# Deserialization of untrusted data (CWE-502)
def insecure_deserialization(data):
    return pickle.loads(data)  # Arbitrary code execution risk

# Use of subprocess with unsanitized input (CWE-78)
def dangerous_subprocess(command):
    subprocess.call(command, shell=True)  # Potential security risk

# Insecure Hashing Algorithm (CWE-327)
def weak_hash(password):
    return hashlib.md5(password.encode()).hexdigest()  # Weak hashing function

# Hardcoded JWT Secret Key (CWE-321)
SECRET_KEY = "mysecret"
def generate_jwt(payload):
    return jwt.encode(payload, SECRET_KEY, algorithm="HS256")

# Insecure HTTP Request (CWE-200, CWE-201)
def fetch_data(url):
    response = requests.get(url)  # Unvalidated input in URL request
    print(response.text)

if __name__ == "__main__":
    insecure_login("admin", "123456")
    vulnerable_query("' OR '1'='1")  # SQL Injection test
    run_command("ls")  # Command Injection test
    insecure_deserialization(b"cos
system
(S'ls'
tR.")  # Pickle arbitrary execution
    dangerous_subprocess("rm -rf /")  # Dangerous command execution
    print(weak_hash("password"))  # MD5 hash vulnerability
    print(generate_jwt({"user": "admin"}))  # Hardcoded JWT secret
    fetch_data("http://example.com")  # Unvalidated external request
